import pandas as pd
from io import BytesIO
import streamlit as st

def convert_gender(gender):
    gender = str(gender).strip().lower()
    if gender == "nam":
        return 1
    elif gender == "n·ªØ":
        return 2
    else:
        return 3

def convert_sdt(value):
    phone = str(value).strip()
    phone = phone.replace(".0", "").replace(" ", "").replace("-", "")
    if phone and phone.isdigit() and not phone.startswith("0") and len(phone) == 9:
        phone = "0" + phone
    return phone

def format_date(value):
    try:
        return pd.to_datetime(value, dayfirst=True).strftime("%d/%m/%Y")
    except:
        return ""

def process_customer_data(df):
    df.columns = df.columns.str.strip()

    # L√†m s·∫°ch s·ªë ƒëi·ªán tho·∫°i v√† lo·∫°i b·ªè d√≤ng tr√πng
    df["ƒêi·ªán tho·∫°i"] = df["ƒêi·ªán tho·∫°i"].apply(convert_sdt)
    df.drop_duplicates(subset=["M√£ h·ªì s∆°"], inplace=True)
    # df.drop_duplicates(subset=["ƒêi·ªán tho·∫°i"], inplace=True)

    rows = []

    for _, row in df.iterrows():
        new_row = {
            "M√£ KH": int(row["M√£ h·ªì s∆°"]) if pd.notna(row["M√£ h·ªì s∆°"]) else None,
            "T√™n kh√°ch h√†ng* \n(b·∫Øt bu·ªôc)": row.get("H·ªç t√™n", ""),
            "ƒêi·ªán tho·∫°i": row["ƒêi·ªán tho·∫°i"],
            "Email": "",
            "Ng√†y sinh \n(DD/MM/YYYY ho·∫∑c DD-MM-YYYY)": format_date(row.get("Ng√†y sinh", "")),
            "Gi·ªõi t√≠nh \n(1. Nam, 2. N·ªØ, 3. Kh√°c)": convert_gender(row.get("Gi·ªõi t√≠nh", "")),
            "ƒê·ªãa ch·ªâ": row.get("ƒê·ªãa ch·ªâ", ""),
            "Ngu·ªìn": row.get("Ngu·ªìn kh√°ch h√†ng", ""),
            "Ghi ch√∫": ""
        }
        rows.append(new_row)

    return pd.DataFrame(rows)

def handle_customer_file(uploaded_file):
    try:
        input_df = pd.read_excel(uploaded_file)

        processed_df = process_customer_data(input_df)

        st.subheader("üìã D·ªØ li·ªáu sau x·ª≠ l√Ω")
        st.dataframe(processed_df)

        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            processed_df.to_excel(writer, index=False)
        output.seek(0)

        st.download_button(
            label="üì§ T·∫£i v·ªÅ file k·∫øt qu·∫£",
            data=output,
            file_name="output_khachhang.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        st.error(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")
